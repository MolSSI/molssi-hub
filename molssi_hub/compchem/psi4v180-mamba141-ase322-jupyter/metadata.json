{
    "name": "PSI4 + ASE + JupyterLab",
    "description": "PSI4 is an open-source quantum chemistry program package designed for efficient ab initio simulation molecular properties. PSI4 is capable of performing large-scale computations with >2500 basis functions on multi-core machines. The Atomic Simulation Environment (ASE) is a set of tools and Python modules for setting up, manipulating, running, visualizing and analyzing atomistic simulations.",
    "source_specifications": [
        {
            "Developers": "`PSI4 contributors <https://github.com/psi4/psi4/graphs/contributors>`_, `ASE Developers <https://gitlab.com/ase/ase/-/project_members>`_",
            "Source": "https://github.com/psi4/psi4, https://gitlab.com/ase/ase",
            "Documentation": "`PSI4 Documentation <https://psicode.org/psi4manual/master/index.html>`_, `ASE Documentation <https://wiki.fysik.dtu.dk/ase/index.html>`_"
        }
    ],
    "hub_specifications": [
        {
            "Repository": "https://hub.docker.com/r/molssi/psi4v180-mamba141-ase322-jupyter",
            "Tags": "https://hub.docker.com/r/molssi/psi4v180-mamba141-ase322-jupyter/tags",
            "Source":"https://github.com/molssi/molssi-hub/tree/main/molssi_hub/compchem/psi4v180-mamba141-ase322-jupyter",
            "Recipe":"https://github.com/molssi/molssi-hub/blob/main/molssi_hub/compchem/psi4v180-mamba141-ase322-jupyter/Dockerfile"
        }
    ],
    "docker_pull_command": "docker pull molssi/psi4v180-mamba141-ase322-jupyter:latest",
    "docker_run_command": "docker run -it --name psi4-ase-jupyter -v $(pwd):/home -p 8888:8888 molssi/psi4v180-mamba141-ase322-jupyter:latest /bin/bash",
    "note": "By default, the ``-v $(pwd):/home`` option mounts the current working directory to ``/home`` in your running container. Doing so, the contents of your current working directory become available in your running container. If you do not wish this to happen, you may simply remove or change this option. By default, Jupyter server communicates to your computed through port ``8888``. Make sure to include ``-p 8888:8888`` in the ``docker run`` command. For NVIDIA GPU support with nvidia containers, add the ``--runtime nvidia --gpus all`` flags to the previous container run command and then run ``nvidia-smi`` to make sure all available GPUs on the docker host are visible inside the docker container.",
    "image_specifications":[
        {
            "OS/Arch": "debian:bullseye-slim (linux/amd64)",
            "Users (UID)": "root (0)",
            "Groups (GID)": "root (0)",
            "Environment variables": [
                {
                    "CONDA_PREFIX": "/opt/conda",
                    "PATH": "${CONDA_PREFIX}/bin:$PATH"
                }
            ],
            "Volumes": "None",
            "Network": [
                {
                    "ip": "*",
                    "port": "8888"
                }
            ],
            "Extras": [
                {
                    "Added directories": "None",
                    "Important packages installed": "mamba 1.4.1, PSI4 1.8.0, ase 3.22.1, NumPy, SciPy, jupyterlab, matplotlib"
                }
            ]
        }
    ]
}